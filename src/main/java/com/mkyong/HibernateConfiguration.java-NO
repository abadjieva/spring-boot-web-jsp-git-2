package com.mkyong;

import java.util.Properties;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;


















import org.hibernate.SessionFactory;
import org.hibernate.ejb.HibernatePersistence;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jndi.JndiTemplate;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBean;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.mkyong.dao.PartnerfirmaDAO;
import com.mkyong.dao.PartnerfirmaDAOImpl;

@Configuration
@EnableTransactionManagement
@ComponentScan({ "com.concretepage"})
@PropertySource(value = { "classpath:application.properties", "classpath:persistence-jndi.properties" })
//@EnableJpaRepositories(basePackages = "com.concretepage.dao")
public class HibernateConfiguration {

	
    @Autowired
    private Environment environment;

//    @Bean(name="SESSIONFactory")
//    public LocalSessionFactoryBean sessionFactory() throws NamingException{
//        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
//        sessionFactory.setDataSource(dataSource());
//        sessionFactory.setPackagesToScan(new String[] { "com.concretepage.model" });
//        sessionFactory.setHibernateProperties(hibernateProperties());
//        return sessionFactory;
//     }
    
    @Bean
	public LocalContainerEntityManagerFactoryBean getEntityManagerFactoryBean() throws NamingException{
		LocalContainerEntityManagerFactoryBean lcemfb = new LocalContainerEntityManagerFactoryBean();
		lcemfb.setDataSource(dataSource());
		lcemfb.setPersistenceUnitName("localContainerEntity");
		//LoadTimeWeaver loadTimeWeaver = new InstrumentationLoadTimeWeaver();
		//lcemfb.setLoadTimeWeaver(loadTimeWeaver);
		return lcemfb;
    }
    
//    @Bean
//    public LocalContainerEntityManagerFactoryBean getEntityManagerFactoryBean() {
//       LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
//       em.setDataSource(dataSource());
//       //em.setPackagesToScan(new String[] { "org.baeldung.persistence.model" });
//  
//       JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
//       em.setJpaVendorAdapter(vendorAdapter);
//       em.setJpaProperties(hibernateProperties());
//  
//       return em;
//    }
//	
    @Bean
    public DataSource dataSource() throws NamingException {
        return (DataSource) new InitialContext().lookup(environment.getProperty("jdbc.bind"));
    }
  
  
//    @Bean
//    public DataSource dataSource() {
//        DriverManagerDataSource dataSource = new DriverManagerDataSource();
//    	
//        dataSource.setDriverClassName(environment.getRequiredProperty("jdbc.driverClassName"));
//        dataSource.setUrl(environment.getRequiredProperty("jdbc.url"));
//        dataSource.setUsername(environment.getRequiredProperty("jdbc.username"));
//        dataSource.setPassword(environment.getRequiredProperty("jdbc.password"));
//        return dataSource;
//    }
//    
    private Properties hibernateProperties() {
        Properties properties = new Properties();
        properties.put("hibernate.dialect", environment.getRequiredProperty("hibernate.dialect"));
        properties.put("hibernate.show_sql", environment.getRequiredProperty("hibernate.show_sql"));
        properties.put("hibernate.format_sql", environment.getRequiredProperty("hibernate.format_sql"));
       return properties;        
    }
    
 
//	@Bean
//    @Autowired
//    public HibernateTransactionManager transactionManager(SessionFactory s) {
//       HibernateTransactionManager txManager = new HibernateTransactionManager();
//       txManager.setSessionFactory(s);
//       return txManager;
//    }
	
//	@Bean
//	   public PlatformTransactionManager transactionManager(EntityManagerFactory emf){
//	      JpaTransactionManager transactionManager = new JpaTransactionManager();
//	      transactionManager.setEntityManagerFactory(emf);
//	 
//	      return transactionManager;
//	   }
	@Bean
	public JpaTransactionManager jpaTransMan()throws NamingException{
		JpaTransactionManager jtManager = new JpaTransactionManager(
				getEntityManagerFactoryBean().getObject());
		return jtManager;
	}
}


